unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME=="Acadia National Park", ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df$longitude <- df$longitude
View(df)
df <- df %>% rename(lat = latitude, long = longitude)
View(df)
df <- df %>% rename(latitude=lat, longitude=long)
View(df)
if("longitude" %in% colnames(df) == FALSE) {
stop("Latitude and/or longitude columns not found.")
}
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("longitude", "latitude")
suppressWarnings()
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
View(output.df)
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=lat, longitude=long)
if("longitude" %in% colnames(df) == FALSE) {
stop("Latitude and/or longitude columns not found.")
}
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("longitude", "latitude")
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
# if(download.rm == TRUE) {
#   file.remove(c("nps_bound.zip", "nps_boundary.xml", "nps_boundary.dbf", "nps_boundary.prj", "nps_boundary.shp", "nps_boundary.shx"))}
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records.")
}
return(output.df)
}
prac <- read.csv("ebird_mappingloc_20220216 copy.csv", header = TRUE)
prac <- prac %>% rename(LAT = latitude, Longitude = longitude)
meh <- filter_nps(prac, "Acadia National Park", lat = LAT, long = Longitude)
meh <- filter_nps(prac, "Acadia National Park", lat = "LAT", long = "Longitude")
View(meh)
meh2 <- filter_nps(prac, "Acadia National Park", lat = prac$LAT, long = prac$Longitude)
meh2 <- filter_nps(prac, "Acadia National Park", lat = "LAT", long = "Longitude")
View(meh2)
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
if("longitude" %in% colnames(df) == FALSE) {
stop("Latitude and/or longitude columns not found.")
}
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records.")
}
return(output.df)
}
meh2 <- filter_nps(prac, "Acadia National Park", lat = "LAT", long = "Longitude")
View(meh2)
meh2 <- filter_nps(prac, "White House", lat = "LAT", long = "Longitude")
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
if("longitude" %in% colnames(df) == FALSE) {
stop("Latitude and/or longitude columns not found.")
}
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
return(output.df)
}
meh2 <- filter_nps(prac, "White House", lat = "LAT", long = "Longitude")
meh2 <- filter_nps(prac, "nwe", lat = "LAT", long = "Longitude")
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
if("longitude" %in% colnames(df) == FALSE) {
stop("Latitude and/or longitude columns not found.")
}
if("latitude" %in% colnames(df) == FALSE) {
stop("Latitude and/or longitude columns not found.")
}
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
return(output.df)
}
meh2 <- filter_nps(prac, "Acadia National Park", lat = "Lat", long = "Longitude")
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
return(output.df)
}
park.list <- as.data.frame(nps.bounds@data$UNIT_NAME)
View(park.list)
park.list <- park.list %>% arrange(nps.bounds@data$UNIT_NAME)
View(park.list)
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
supressWarnings(proj4string(df))
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
return(output.df)
}
meh4 <- filter_nps(prac, "Acadia National Park", lat = "Lat", long = "Longitude")
meh4 <- filter_nps(prac, "Acadia National Park", lat = "LAT", long = "Longitude")
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
suppressWarnings(proj4string(df))
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
return(output.df)
}
meh4 <- filter_nps(prac, "Acadia National Park", lat = "LAT", long = "Longitude")
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
suppressWarnings(proj4string(df), proj4string(select.bounds))
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
return(output.df)
}
meh4 <- filter_nps(prac, "Acadia National Park", lat = "LAT", long = "Longitude")
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
suppressWarnings(proj4string(df))
suppressWarnings(proj4string(select.bounds))
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
return(output.df)
}
meh4 <- filter_nps(prac, "Acadia National Park", lat = "LAT", long = "Longitude")
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
return(output.df)
}
meh4 <- filter_nps(prac, "Acadia National Park", lat = "LAT", long = "Longitude")
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
suppressWarnings(CRS(proj4string(select.bounds)))
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
return(output.df)
}
meh4 <- filter_nps(prac, "Acadia National Park", lat = "LAT", long = "Longitude")
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
suppressWarnings(.)
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
return(output.df)
}
prac <- read.csv("ebird_mappingloc_20220216 copy.csv", header = TRUE)
prac <- prac %>% rename(LAT = latitude, Longitude = longitude)
meh4 <- filter_nps(prac, "Acadia National Park", lat = "LAT", long = "Longitude")
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
suppressWarnings(df)
proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
return(output.df)
}
prac <- read.csv("ebird_mappingloc_20220216 copy.csv", header = TRUE)
prac <- prac %>% rename(LAT = latitude, Longitude = longitude)
meh4 <- filter_nps(prac, "Acadia National Park", lat = "LAT", long = "Longitude")
proj4string(select.bounds)
df <- read.csv("ebird_mappingloc_20220216 copy.csv", header = TRUE)
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
slot(df, "proj4string") <- slot(select.bounds, "proj4string")
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
slot(df, "proj4string") <- slot(select.bounds, "proj4string")
#proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
return(output.df)
}
meh4 <- filter_nps(prac, "Acadia National Park", lat = "LAT", long = "Longitude")
View(meh4)
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
slot(df, "proj4string") <- slot(select.bounds, "proj4string")
#proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
if(length(output.df) > 1) {
message("Calculations complete")
}
return(output.df)
}
meh4 <- filter_nps(prac, "Acadia National Park", lat = "LAT", long = "Longitude")
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
slot(df, "proj4string") <- slot(select.bounds, "proj4string")
#proj4string(df) <- CRS(proj4string(select.bounds))
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
if(length(output.df) > 1) {
message("Calculations complete!")
}
return(output.df)
}
filter_nps <- function(df, park, lat, long) {
if (file.exists("nps_bound.zip") == FALSE) {
download('https://irma.nps.gov/DataStore/DownloadFile/668434', dest="nps_bound.zip")
}
if (file.exists("nps_boundary.shp") == FALSE) {
unzip("nps_bound.zip")
}
nps.bounds <- readOGR(unzip("nps_bound.zip", "nps_boundary.shp"), verbose = FALSE)
select.bounds <- nps.bounds[nps.bounds@data$UNIT_NAME==paste(park), ]
if (length(select.bounds@polygons) < 1) {
stop("Function returned a park with 0 polygons. The park name does not exist. Go to https://rpubs.com/klima21/filternps for a list of valid park names.")
}
df <- df %>% rename(latitude=paste(lat), longitude=paste(long))
df$"long" <- df$longitude
df$"lat" <- df$latitude
coordinates(df) <- c("long", "lat")
slot(df, "proj4string") <- slot(select.bounds, "proj4string")
output <- over(select.bounds, df, returnList = TRUE)
output.df <- as.data.frame(output$`403`)
if(length(output.df) < 1) {
stop("Function returned a dataframe with 0 records. Records may not be within the specifed park boundaries")
}
if(length(output.df) > 1) {
message("Calculations complete!")
}
return(output.df)
}
